package com.example.contramini;

import org.cocos2d.actions.interval.CCMoveBy;
import org.cocos2d.actions.interval.CCMoveTo;
import org.cocos2d.actions.interval.CCScaleTo;
import org.cocos2d.actions.interval.CCSequence;
import org.cocos2d.layers.CCLayer;
import org.cocos2d.nodes.CCDirector;
import org.cocos2d.nodes.CCSprite;
import org.cocos2d.types.CGPoint;

import android.view.MotionEvent;

public class GameLayer extends CCLayer{
	//declare a sprite;
	CCSprite player;
	CCSprite landMonster;
	
	CCSprite leftButton;
	CCSprite rightButton;
	CCSprite jumpButton;
	
	
	// to receive user touch event , you should set this layer first.
	public GameLayer(){
		//made this layer receive touch event
		this.setIsTouchEnabled(true);
		player = CCSprite.sprite("ic_launcher.png");
		landMonster = CCSprite.sprite("goomba2.png");
		leftButton = CCSprite.sprite("leftbutton.png");
		rightButton = CCSprite.sprite("rightbutton.png");
		jumpButton = CCSprite.sprite("jumpbutton.jpg");
		
		
		CGPoint initPoint = CGPoint.ccp(100, 500);
		CGPoint landMonsterPosition = CGPoint.ccp(1300, 500);
		CGPoint LBPosition = CGPoint.ccp(250, 150);
		CGPoint RBPosition = CGPoint.ccp(750, 150);
		CGPoint JBPosition = CGPoint.ccp(1500, 150);
		
		this.addChild(player);
		this.addChild(leftButton);
		this.addChild(rightButton);
		this.addChild(jumpButton);
		this.addChild(landMonster);
		
		player.setPosition(initPoint);
		landMonster.setPosition(landMonsterPosition);
		CCScaleTo monsterScale1 = CCScaleTo.action(0.1f, 0.3f);
		leftButton.setPosition(LBPosition);
		rightButton.setPosition(RBPosition);
		jumpButton.setPosition(JBPosition);
		
		landMonster.runAction(monsterScale1);
		
		
		
	}

	// when user begin to touch, execute this method.
	@Override
	public boolean ccTouchesBegan(MotionEvent event) {
		float x = event.getX();
		float y = event.getY();
		
		CGPoint p1 = CGPoint.ccp(x, y);
		CGPoint p2 = CCDirector.sharedDirector().convertToGL(p1);
		System.out.println("p1.x:"+ x + ".p1.y:" + y);
		System.out.println("p2.x:"+ p2.x + ".p2.y:" + p2.y);
		System.out.println("began");
		
		float playerX =player.getPosition().x;
		//jump action
		CGPoint jumpUpVec = CGPoint.ccp(0, 200);
		CGPoint jumpDownDestination = CGPoint.ccp(playerX, 500);
		CCMoveBy moveUp = CCMoveBy.action(0.5f, jumpUpVec);
		CCMoveTo moveDown = CCMoveTo.action(0.5f, jumpDownDestination);
		CCSequence jumpSec = CCSequence.actions(moveUp, moveDown);
		
		
		if(x > 1000 && y< 500){
			player.runAction(jumpSec);
		}else if(x >1000 && y>500){
			this.shoot();
		}
		return super.ccTouchesBegan(event);
	}

	
	// when user finger leave screen, execute this method.
	@Override
	public boolean ccTouchesEnded(MotionEvent event) {
		// TODO Auto-generated method stub

		System.out.println("end");
		return super.ccTouchesEnded(event);
	}
	
	//when user finger moved in screen, execute this method.
	@Override
	public boolean ccTouchesMoved(MotionEvent event) {
		// TODO Auto-generated method stub
		//System.out.println("move");
		float x = event.getX();
		float y = event.getY();
		
		CGPoint p1 = CGPoint.ccp(x, y);
		CGPoint p2 = CCDirector.sharedDirector().convertToGL(p1);
		float realX = p2.x;
		float realY = p2.y;
		
		CGPoint moveForwardVetor = CGPoint.ccp(50, 0);
		CGPoint moveBackwardVector = CGPoint.ccp(-50, 0);
		
		
		CCMoveBy forwardMove = CCMoveBy.action(0.2f, moveForwardVetor);
		CCMoveBy backwardMove = CCMoveBy.action(0.2f, moveBackwardVector);
		
		
		if(realX <= 500){
			player.runAction(backwardMove);
			
		}else if(realX<= 1000){
			
			player.runAction(forwardMove);
		}

		
		return super.ccTouchesMoved(event);
	}
	
	public void shoot(){
		float x =player.getPosition().x;
		float y =player.getPosition().y;
		CCSprite projectile = CCSprite.sprite("Projectile.png");
		this.addChild(projectile);
		CGPoint ini = CGPoint.ccp(x, y);
		projectile.setPosition(ini);
		
		CGPoint target = CGPoint.ccp(1800, 500);
		CCMoveTo moveProjec = CCMoveTo.action(0.5f, target);
		projectile.runAction(moveProjec);
		
		
	}

}